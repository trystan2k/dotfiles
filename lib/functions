#!/usr/bin/env bash

if [ -z "$DOTFILES_FOLDER" ]; then
    fail "Dotfiles folder is not defined. Process cannot continue"
    exit 99
fi

#shellcheck source=/dev/null
source "$DOTFILES_FOLDER"/symlinks/.exports

# Link a file
link_file () {
	dateStr=$(date +%Y-%m-%d-%H%M)

	local src=$1 dst=$2

    local overwrite_all=false backup_all=false skip_all=false
	local overwrite='' backup='' skip='' action=''

    # Check if folder of $dst exists, otherwise create it
    if [ ! -d "$(dirname "$dst")" ]; then
        success "Creating folder $(dirname "$dst")"
        mkdir -p "$(dirname "$dst")"
    fi

	if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]
	then

		if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
		then

			currentSrc="$(readlink "$dst")"

			if [ "$currentSrc" == "$src" ]
			then

				skip=true;

			else

				user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
				[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
				read -r -n 1 action

				case "$action" in
					o )
						overwrite=true;;
					O )
						overwrite_all=true;;
					b )
						backup=true;;
					B )
						backup_all=true;;
					s )
						skip=true;;
					S )
						skip_all=true;;
					* )
					;;
				esac

			fi

		fi

		overwrite=${overwrite:-$overwrite_all}
		backup=${backup:-$backup_all}
		skip=${skip:-$skip_all}

		if [ "$overwrite" == "true" ]
		then
			success "Removing $dst"
			rm -rf "$dst"
		fi

		if [ "$backup" == "true" ]
		then
			success "Backing up file $dst as ${dst}.${dateStr}"
			mv "$dst" "${dst}.${dateStr}"
		fi

		if [ "$skip" == "true" ]
		then
			success "Skiping $src"
		fi
	fi

	if [ "$skip" != "true" ]  # "false" or empty
	then
		success "Linking $src to $dst"
		ln -sv "$src" "$dst"
	fi
}

# Ask the user a Yes/No question
function ask_question() {
    read -r -p "$(user "${1} (y/N) ")" choice
    case "$choice" in
        Y | y | Yes | YES | yes ) return 0; exit;;
        N | n | No | NO | no ) return 1; exit;;
        * ) return 2;;
    esac
}

abspath() {                                               
    cd "$(dirname "$1")" || exit
    printf "%s/%s\n" "$(pwd)" "$(basename "$1")"
}

verifyLogFileExists() {
    if [[ ! -f $DOTFILE_LOG_FILE ]] ; then
        mkdir -p "$LOG_FOLDER"
        touch "$DOTFILE_LOG_FILE"
    fi
}

LOG_FOLDER=$DOTFILES_FOLDER/logs
export DOTFILE_LOG_FILE="$LOG_FOLDER/dotfiles.log"
verifyLogFileExists

info () {
    printf "\r  [ %s ] [ \033[36mINFO\033[0m ] ""$1"" \n" "$(_getCurrentDate)"
}

user () {
    printf "\r [ %s ] [ \033[34m????\033[0m ] ""$1"" \n" "$(_getCurrentDate)"
}

success () {
    printf "\r [ %s ] [ \033[32mSUCC\033[0m ] ""$1"" \n" "$(_getCurrentDate)"
}

warn () {
    printf "\r [ %s ] [ \033[31mWARN\033[0m ] ""$1"" \n" "$(_getCurrentDate)"
}

fail () {
    printf "\r [ %s ] [ \033[31mFAIL\033[0m ] ""$1"" \n" "$(_getCurrentDate)"
    exit
}

install() {
    installTypeByOS=$1
    read -r -a otherArguments <<< "${@:2}"

    for i in $installTypeByOS
    do
        os_type=${i%:*};
        install_type=${i#*:};

        if [[ $OSTYPE == "$os_type"* ]] ; then
            case "$install_type" in
                debFile*)
                    _debFileInstall "${otherArguments[@]}"
                    ;;
                sh*)
                    _shInstall "${otherArguments[@]}"
                    ;;
                appImage*)
                    _appImageInstall "${otherArguments[@]}"
                    ;;
                snap*)
                    _snapInstall "${otherArguments[@]}"
                    ;;     
                dmg*)
                    _dmgInstall "${otherArguments[@]}"
                    ;;               
                *)        
                    warn "Unknow Installatin type: '$install_type'"
                    _errorInstall "${otherArguments[@]}" ;;
            esac   

            _checkInstallStatus $?
        fi
    done

}

_getCurrentDate() {
    date "+%Y-%m-%d %H:%M:%S"
}

_errorInstall() {
    warn "'$1' installation failed"
}

_checkInstallStatus() {
    if [ "$1" -gt 0 ] ; then
        _errorInstall "${otherArguments[*]}"
    else
        success "'${otherArguments[*]}' installation finished with success"
    fi
}

_debFileInstall() {

    if [ -z "$1" ]; then
        warn "The name of the tool to install must be informed."
        return 1
    fi

    if [ -z "$2" ]; then
        warn "To install .deb files, a URL must be informed, to obtain the .deb file from"
        return 2
    fi    

    info "Installing '$1' via .deb file, from $2"

    wget -O "$PATH_TO_DOWNLOAD"/"$1".deb "$2"
    sudo apt install "$PATH_TO_DOWNLOAD"/"$1".deb -y
    rm "$PATH_TO_DOWNLOAD"/"$1".deb

    return 0
}

_shInstall() {

    if [ -z "$1" ]; then
        warn "The name of the tool to install must be informed."
        return 1
    fi

    if [ -z "$2" ]; then
        warn "To install via sh script, a URL must be informed, to obtain the sh file from"
        return 2
    fi       

    info "Installing $1 via sh script, from $2"

    sh -c "$(curl -fsSL "$2")"

    return 0
}

_snapInstall() {

    if [ -z "$1" ]; then
        warn "The name of the tool to install must be informed."
        return 1
    fi

    info "Installing '$1' via Snap"

    sudo snap install "$1"

    return 0
}

_appImageInstall() {

    if [ -z "$1" ]; then
        warn "The name of the tool to install must be informed."
        return 1
    fi

    if [ -z "$2" ]; then
        warn "To install .appImage files, a URL must be informed, to obtain the .appImage file from"
        return 2
    fi     

    if [ ! -d "$PATH_TO_CUSTOM_APPS" ]; then
        mkdir -p "$PATH_TO_CUSTOM_APPS"
    fi  

    info "Installing '$1' via AppImage, from $2"

    wget -O "$PATH_TO_CUSTOM_APPS"/"$1".AppImage "$2"
    chmod u+x "$PATH_TO_CUSTOM_APPS"/"$1".AppImage

    wget -O "$PATH_TO_CUSTOM_APPS"/"$1".png "$3"   

    sudo sh -c "echo '[Desktop Entry]' > /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Encoding=UTF-8' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Name=$1' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Comment=$1' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Exec=${PATH_TO_CUSTOM_APPS}/${1}.AppImage' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Icon=${PATH_TO_CUSTOM_APPS}/${1}.png' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Terminal=false' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Type=Application' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'Categories=Application;' >> /usr/share/applications/$1.desktop"
    sudo sh -c "echo 'StartupNotify=true' >> /usr/share/applications/$1.desktop"

    return 0
}

_dmgInstall() {

    if [ -z "$1" ]; then
        warn "The name of the tool to install must be informed."
        return 1
    fi

    if [ -z "$2" ]; then
        warn "To install .dmg files, a URL must be informed, to obtain the .dmg file from"
        return 2
    fi     

    info "Installing '$1' via DMG, from $2"

    filename="$HOME"/Downloads/"$1".dmg

    wget -O "$filename" "$2"
    listing=$(hdiutil attach "$filename" | grep Volumes)
    volume=$(echo "$listing" | cut -f 3)

    appFileCount=$(find "$volume" -name "*.app" 2>/dev/null | wc -l)
    pkgFileCount=$(find "$volume" -name "*.pkg" 2>/dev/null | wc -l)
    if [  "$appFileCount" != 0 ]; then
        cp -rf "$volume"/*.app /Applications    
    elif [ "$pkgFileCount" != 0 ]; then
        package=$(find "$volume" -name "*.pkg" | head -1)
        installer -pkg "$volume"/"$package" -target /
    fi

    hdiutil unmount "$(echo "$listing" | cut -f 1 | awk '{$1=$1};1')"
    rm "$filename"

    return 0
}